[{"C:\\Users\\santo\\Desktop\\frontend\\src\\App.tsx":"1","C:\\Users\\santo\\Desktop\\frontend\\src\\reportWebVitals.ts":"2","C:\\Users\\santo\\Desktop\\frontend\\src\\turtle.ts":"3","C:\\Users\\santo\\Desktop\\frontend\\src\\3D_Model\\Turtle.js":"4"},{"size":3984,"mtime":1609695060675,"results":"5","hashOfConfig":"6"},{"size":425,"mtime":1609323351583,"results":"7","hashOfConfig":"6"},{"size":3339,"mtime":1609694845618,"results":"8","hashOfConfig":"6"},{"size":646,"mtime":1609692033254,"results":"9","hashOfConfig":"6"},{"filePath":"10","messages":"11","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"12"},"1x2kl8g",{"filePath":"13","messages":"14","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"15","messages":"16","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"17","messages":"18","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\santo\\Desktop\\frontend\\src\\App.tsx",["19","20","21","22","23","24","25","26","27"],"import React, { Suspense } from 'react';\nimport { Canvas, MeshProps, useFrame } from 'react-three-fiber'\nimport type { Mesh } from 'three'\nimport { makeStyles, Theme, createStyles } from '@material-ui/core/styles';\n\nimport Grid from '@material-ui/core/Grid';\nimport Tooltip from '@material-ui/core/Tooltip';\n\nimport {Turtle} from './turtle';\nimport { OrbitControls } from '@react-three/drei/OrbitControls';\nimport { Sky } from '@react-three/drei';\n\nimport  TurtleModel from './3D_Model/Turtle';\n\nconst Block = (props:any)=>{\n return (<mesh\n  {...props}\n  >\n  <boxBufferGeometry args={[1, 1, 1]} />\n  <meshStandardMaterial color={\"blue\"} />\n</mesh>) \n\n}\n\nconst WorldVisualization = (props:any)=>{\n \n  return (<Canvas style={{height:\"100%\",minHeight:\"500px\"}} >\n    \n  <ambientLight />\n  <pointLight position={[10, 10, 10]} />\n  <OrbitControls />\n  <Sky/>\n  <Suspense fallback={null}>\n\n <TurtleModel position={props.position} scale={[0.4,0.4,0.4]}/>\n {Array(10).fill(0).map((el,k)=>{\n   return <Block key={k} position={[k,0,0]} />;\n })}\n  </Suspense> \n</Canvas>)\n}\n\ninterface Item{\ndamage:number,\ncount:number,\nname:string\n}\ninterface Slot{\n  data:undefined|Item,\n  slot:number\n}\ninterface state{\n  \n  turtle:Turtle,\n  list:Array<string>,\n  inputText:string,\n  inventory:Array<Slot>,\n  selected:number,\n  position:[number,number,number]\n}\n\nclass App extends React.Component<any,state>{\n  \n  constructor(props:any){\n    super(props);\n    this.state={\n      turtle:new Turtle(new WebSocket(\"ws://localhost:5757\")),\n      list:[\"\"],\n      inputText:\"\",\n      inventory:Array(16).fill(0),\n      selected:1,\n      position:[0,300,0]\n    }\n  }\n  readPosition(){\n    console.log(this.state.turtle.position)\n    this.setState({\n      position: this.state.turtle.position\n    })\n    \n    \n  }\n  componentWillUnmount(){\n    this.state.turtle.destroyConn();\n  }\n  componentDidMount(){\n    \n    this.state.turtle.ws.onmessage = (messagge) => {\n      const parsed = JSON.parse(messagge.data);\n      console.log(JSON.parse(messagge.data))\n      if(parsed.type === \"update\" && parsed.datatype ===\"inventory\"){\n        this.state.turtle.invetory = parsed.data;\n        this.setState({\n          inventory:parsed.data\n        })\n      }\n      /*\n      let list = this.state.list;\n      //list.push(messagge as unknown as string)\n      this.setState({\n        list:list\n      })\n      */\n\n    };\n\n  }\n  \n  render(){\n    let {turtle,inputText,inventory,selected} = this.state;\n    console.log(this.state.position)\n    return(\n      <>\n    <div style={{position:\"absolute\",zIndex:100}}>\n      <input type=\"text\" value={inputText} onChange={(el)=> this.setState({inputText:el.target.value})}/>\n      <button onClick={()=>turtle.exec(inputText)}>Send</button>\n    <button onClick={()=>turtle.forward()}>Avanti</button>\n    <button onClick={()=>turtle.back()}>Indientro</button>\n    <button onClick={()=>turtle.up()}>Sopra</button>\n    <button onClick={()=>turtle.down()}>Sotto</button>\n    <button onClick={()=>turtle.inspect()}>Detect block</button>\n    <button onClick={()=>turtle.getInventory()}>Inventario</button>\n    <button onClick={()=>this.readPosition()}>Posizione</button>\n    </div>\n    <div style={{width:\"200px\",position:\"absolute\",zIndex:120,top:\"50px\"}}>\n        {inventory.map((el,k)=>{\n          return (\n          <Tooltip title={el.data?el.data.name:\"\"} key={k}> \n            <p style={{background:selected===(k+1)?\"green\":\"grey\",width:\"25px\",height:\"25px\",float:\"left\",margin:\"10px\"}} onClick={()=>{turtle.selectSpecificSlot(k+1);this.setState({selected:k+1 })}}>{el.data?el.data.count:\"\"}</p>\n            </Tooltip>);\n        })}\n      </div>\n      <WorldVisualization position={this.state.position}/>\n    </>)\n  }\n}\nexport default App;\n\n/**\n * \n *  <Canvas resize={{scroll:true}} orthographic camera={{ zoom: 50, position: [0, 0, 100] }}>\n    <ambientLight />\n    <pointLight position={[10, 10, 10]} />\n    <Box position={[-1, 0, 0]} />\n    <Box position={[2, 0, 0]} />\n  </Canvas>\n */","C:\\Users\\santo\\Desktop\\frontend\\src\\reportWebVitals.ts",[],"C:\\Users\\santo\\Desktop\\frontend\\src\\turtle.ts",["28"],"C:\\Users\\santo\\Desktop\\frontend\\src\\3D_Model\\Turtle.js",[],{"ruleId":"29","severity":1,"message":"30","line":2,"column":18,"nodeType":"31","messageId":"32","endLine":2,"endColumn":27},{"ruleId":"29","severity":1,"message":"33","line":2,"column":29,"nodeType":"31","messageId":"32","endLine":2,"endColumn":37},{"ruleId":"29","severity":1,"message":"34","line":3,"column":15,"nodeType":"31","messageId":"32","endLine":3,"endColumn":19},{"ruleId":"29","severity":1,"message":"35","line":4,"column":10,"nodeType":"31","messageId":"32","endLine":4,"endColumn":20},{"ruleId":"29","severity":1,"message":"36","line":4,"column":22,"nodeType":"31","messageId":"32","endLine":4,"endColumn":27},{"ruleId":"29","severity":1,"message":"37","line":4,"column":29,"nodeType":"31","messageId":"32","endLine":4,"endColumn":41},{"ruleId":"29","severity":1,"message":"38","line":6,"column":8,"nodeType":"31","messageId":"32","endLine":6,"endColumn":12},{"ruleId":"39","severity":1,"message":"40","line":88,"column":5,"nodeType":"41","endLine":88,"endColumn":25},{"ruleId":"39","severity":1,"message":"40","line":92,"column":9,"nodeType":"41","endLine":92,"endColumn":26},{"ruleId":"42","severity":1,"message":"43","line":47,"column":13,"nodeType":"44","messageId":"45","endLine":51,"endColumn":17},"@typescript-eslint/no-unused-vars","'MeshProps' is defined but never used.","Identifier","unusedVar","'useFrame' is defined but never used.","'Mesh' is defined but never used.","'makeStyles' is defined but never used.","'Theme' is defined but never used.","'createStyles' is defined but never used.","'Grid' is defined but never used.","react/no-direct-mutation-state","Do not mutate state directly. Use setState().","MemberExpression","no-unreachable","Unreachable code.","ExpressionStatement","unreachableCode"]